generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Client    Client[]
  Invoice   Invoice[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Client {
  id      String  @id @default(cuid())
  name    String
  email   String
  address String?

  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}

enum InvoiceStatus {
  PENDING
  PAID
  DRAFT
  REFUNDED
  OVERDUE
}

model InvoiceCustomField {
  id        String   @id @default(cuid())
  key       String
  value     String
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}

model InvoiceItem {
  id          String   @id @default(cuid())
  taxRate     Decimal  @default(0)
  description String
  quantity    Int
  amount      Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}

model Invoice {
  id        String        @id @default(cuid())
  status    InvoiceStatus @default(PENDING)
  dueDate   DateTime?
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  User         User                 @relation(fields: [userId], references: [id])
  customFields InvoiceCustomField[]
  Clients      Client[]
  Items        InvoiceItem[]
  userId       String
  Coupon       Coupon?              @relation(fields: [couponId], references: [id])
  couponId     String?
}

model Coupon {
  id          String    @id @default(cuid())
  code        String    @unique
  description String?
  discount    Decimal   @default(0)
  expiresAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Invoice Invoice[]
}
